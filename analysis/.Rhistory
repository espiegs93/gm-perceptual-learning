d = [1,2,3]
d = .(1,2,3)
hist(d)
d = (1,2,3)
d = Vector(1,2,3)
hist(d)
d = vector(1,2,3)
hist(d)
d = c(1,2,3)
hist(d)
d = c(57, 15, 15, 12, 13, 17, 39, 12, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 18, 15, 17, 20, 19, 19, 16, 20, 18, 18, 16, 17, 17, 17, 17, 18, 16, 17, 17, 19, 16, 18, 23, 18, 20, 17, 20, 19, 16, 23, 21, 19, 18, 20, 22, 20, 19, 20, 18, 17, 20, 17, 18, 19, 20, 17, 20, 19, 16, 19, 18, 18, 18, 18, 18, 17, 19, 18, 18, 19, 24, 18, 32, 17, 20, 20, 18, 19, 21, 20, 19, 19, 19, 19, 17, 20, 21, 18, 18, 19, 19, 16, 19, 21, 18, 19, 18, 18, 17, 20, 17, 17, 17, 17, 17, 16, 16, 15, 17, 20, 16, 20, 21, 19, 17, 20, 20, 16, 22, 18, 18, 18, 19, 18, 17, 18, 17, 17, 19, 20, 20, 18, 18, 18, 17, 16, 16, 17, 15, 16, 16, 20, 16, 18, 18, 19, 17, 16, 18, 23, 18, 20, 18, 18, 19, 26, 19, 17, 17, 20, 17, 21, 17, 21, 17, 18, 17, 18, 17, 17, 17, 15, 19, 16, 17, 18, 19, 16, 18, 15, 19, 15, 19, 21, 17, 19, 18, 18, 18, 17, 17, 17, 16, 16, 17, 17, 17, 17, 17, 16, 17, 15, 17, 15, 18, 16, 17, 16, 16, 20, 16, 19, 18, 15, 18, 15, 18, 16, 16, 18, 16, 18, 15, 18, 15, 18, 17, 16, 18, 15, 17, 16, 17, 16, 17, 17, 17, 17, 30, 16, 16, 16, 17, 15, 16, 18, 15, 18, 15, 19, 15, 17, 17, 21, 15, 17, 17, 18, 16, 16, 17, 15, 19, 16, 16, 16, 16, 15, 16, 16, 12, 19, 26, 21, 13, 16, 17, 17, 19, 17, 14, 16, 17, 20, 14, 17, 16, 18, 15, 16, 17, 18, 16, 18, 15, 17, 18, 15, 17, 17, 16, 16, 18, 15, 17, 18, 17, 16, 18, 15, 18, 15, 20, 17, 20, 18, 16, 14, 15, 15, 16, 17, 16, 16, 17, 17, 16, 17, 16, 18, 15, 17, 17, 18, 16, 17, 16, 18, 16, 16, 17, 17, 19, 13, 17, 18, 16, 17, 25, 16, 19, 17, 16, 15, 21, 15, 15, 16, 17, 14, 16, 16, 17, 15, 16, 16, 15, 17, 16, 17, 16, 19, 15, 19, 18, 18, 18, 17, 14, 16, 14, 17, 16, 16, 16, 17, 18, 15, 18, 16, 18, 16, 18, 14, 18, 15, 18, 16, 17, 16, 21, 16, 16, 16, 18, 17, 17, 15, 17, 16, 16, 16, 16, 17, 16, 18, 15, 17, 18, 15, 17, 17, 17, 19, 17, 19, 17, 20, 18, 17, 17, 22, 17, 17, 16, 19, 16, 23, 17, 19, 18, 15, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 15, 16, 17, 17, 15, 16, 17, 16, 14, 17, 16, 17, 17, 18, 18, 16, 17, 16, 19, 14, 17, 16, 16, 17, 17, 16, 17, 18, 18, 19, 17, 18, 18, 17, 17, 18, 17, 17, 20, 17, 19, 18, 22, 18, 19, 18, 16, 19, 16, 18, 20, 16, 16, 19, 22, 19, 21, 20, 17, 21, 19, 17, 17, 17, 18, 17, 18, 16, 18, 18, 17, 16, 17, 17, 17, 16, 17, 17, 16, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 19, 14, 18, 16, 16, 17, 17, 16, 17, 17, 16, 18, 16, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 22, 12, 16, 16, 17, 17, 16, 20, 14, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 17, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 19, 15, 17, 16, 17, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 23, 10, 18, 16, 17, 16, 18, 16, 17, 16, 18, 16, 17, 16, 17, 16, 18, 15, 17, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 17, 17, 17, 16, 17, 16, 18, 15, 27, 15, 11, 14, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 17, 18, 15, 18, 15, 18, 16, 18, 15, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 16, 17, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 18, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 19, 14, 17, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 18, 15, 18, 16, 17, 17, 16, 16, 18, 16, 17, 16, 18, 15, 17, 18, 15, 18, 16, 17, 16, 17, 16, 17, 17, 16, 17, 18, 15, 18, 16, 16, 19, 15, 18, 16, 17, 15, 18, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 22, 11, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 18, 15, 17, 17, 19, 14, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 18, 15, 17, 17, 16, 17, 22, 11, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 24, 11, 15, 18, 15, 18, 16, 20, 13, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 16, 17, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 16, 18, 16, 17, 16, 17, 16, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 17, 17, 16, 17, 17, 17, 17, 15, 19, 15, 18, 18, 14, 16, 18, 16, 17, 16, 17, 18, 15, 17, 16, 17, 18, 16, 17, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 16, 18, 16, 17, 16, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 22, 11, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 17)
hist(d)
hist(d)
d = c(57, 15, 15, 12, 13, 17, 39, 12, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 18, 15, 17, 20, 19, 19, 16, 20, 18, 18, 16, 17, 17, 17, 17, 18, 16, 17, 17, 19, 16, 18, 23, 18, 20, 17, 20, 19, 16, 23, 21, 19, 18, 20, 22, 20, 19, 20, 18, 17, 20, 17, 18, 19, 20, 17, 20, 19, 16, 19, 18, 18, 18, 18, 18, 17, 19, 18, 18, 19, 24, 18, 32, 17, 20, 20, 18, 19, 21, 20, 19, 19, 19, 19, 17, 20, 21, 18, 18, 19, 19, 16, 19, 21, 18, 19, 18, 18, 17, 20, 17, 17, 17, 17, 17, 16, 16, 15, 17, 20, 16, 20, 21, 19, 17, 20, 20, 16, 22, 18, 18, 18, 19, 18, 17, 18, 17, 17, 19, 20, 20, 18, 18, 18, 17, 16, 16, 17, 15, 16, 16, 20, 16, 18, 18, 19, 17, 16, 18, 23, 18, 20, 18, 18, 19, 26, 19, 17, 17, 20, 17, 21, 17, 21, 17, 18, 17, 18, 17, 17, 17, 15, 19, 16, 17, 18, 19, 16, 18, 15, 19, 15, 19, 21, 17, 19, 18, 18, 18, 17, 17, 17, 16, 16, 17, 17, 17, 17, 17, 16, 17, 15, 17, 15, 18, 16, 17, 16, 16, 20, 16, 19, 18, 15, 18, 15, 18, 16, 16, 18, 16, 18, 15, 18, 15, 18, 17, 16, 18, 15, 17, 16, 17, 16, 17, 17, 17, 17, 30, 16, 16, 16, 17, 15, 16, 18, 15, 18, 15, 19, 15, 17, 17, 21, 15, 17, 17, 18, 16, 16, 17, 15, 19, 16, 16, 16, 16, 15, 16, 16, 12, 19, 26, 21, 13, 16, 17, 17, 19, 17, 14, 16, 17, 20, 14, 17, 16, 18, 15, 16, 17, 18, 16, 18, 15, 17, 18, 15, 17, 17, 16, 16, 18, 15, 17, 18, 17, 16, 18, 15, 18, 15, 20, 17, 20, 18, 16, 14, 15, 15, 16, 17, 16, 16, 17, 17, 16, 17, 16, 18, 15, 17, 17, 18, 16, 17, 16, 18, 16, 16, 17, 17, 19, 13, 17, 18, 16, 17, 25, 16, 19, 17, 16, 15, 21, 15, 15, 16, 17, 14, 16, 16, 17, 15, 16, 16, 15, 17, 16, 17, 16, 19, 15, 19, 18, 18, 18, 17, 14, 16, 14, 17, 16, 16, 16, 17, 18, 15, 18, 16, 18, 16, 18, 14, 18, 15, 18, 16, 17, 16, 21, 16, 16, 16, 18, 17, 17, 15, 17, 16, 16, 16, 16, 17, 16, 18, 15, 17, 18, 15, 17, 17, 17, 19, 17, 19, 17, 20, 18, 17, 17, 22, 17, 17, 16, 19, 16, 23, 17, 19, 18, 15, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 15, 16, 17, 17, 15, 16, 17, 16, 14, 17, 16, 17, 17, 18, 18, 16, 17, 16, 19, 14, 17, 16, 16, 17, 17, 16, 17, 18, 18, 19, 17, 18, 18, 17, 17, 18, 17, 17, 20, 17, 19, 18, 22, 18, 19, 18, 16, 19, 16, 18, 20, 16, 16, 19, 22, 19, 21, 20, 17, 21, 19, 17, 17, 17, 18, 17, 18, 16, 18, 18, 17, 16, 17, 17, 17, 16, 17, 17, 16, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 19, 14, 18, 16, 16, 17, 17, 16, 17, 17, 16, 18, 16, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 22, 12, 16, 16, 17, 17, 16, 20, 14, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 17, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 19, 15, 17, 16, 17, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 23, 10, 18, 16, 17, 16, 18, 16, 17, 16, 18, 16, 17, 16, 17, 16, 18, 15, 17, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 17, 17, 17, 16, 17, 16, 18, 15, 27, 15, 11, 14, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 17, 18, 15, 18, 15, 18, 16, 18, 15, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 16, 17, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 18, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 19, 14, 17, 17, 17, 16, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 19, 15, 18, 15, 18, 16, 17, 17, 16, 16, 18, 16, 17, 16, 18, 15, 17, 18, 15, 18, 16, 17, 16, 17, 16, 17, 17, 16, 17, 18, 15, 18, 16, 16, 19, 15, 18, 16, 17, 15, 18, 16, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 22, 11, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 18, 15, 18, 15, 17, 17, 19, 14, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 18, 15, 17, 17, 16, 17, 22, 11, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 24, 11, 15, 18, 15, 18, 16, 20, 13, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 16, 17, 16, 18, 15, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 16, 18, 16, 17, 16, 17, 16, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 15, 18, 16, 17, 16, 17, 17, 16, 17, 17, 17, 17, 15, 19, 15, 18, 18, 14, 16, 18, 16, 17, 16, 17, 18, 15, 17, 16, 17, 18, 16, 17, 16, 18, 15, 18, 15, 18, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 16, 18, 16, 17, 16, 17, 18, 15, 18, 15, 18, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 22, 11, 18, 15, 18, 16, 17, 16, 18, 15, 18, 16, 17, 16, 18, 15, 17);
hist(d);
install knitr
install('knitr')
install.packages('knitr')
```
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
```{r}
.36*.18
setwd("~/Code/gm-perceptual-learning/analysis")
data = read.csv("gm_pl_v1_0.csv", header=TRUE);
View(data)
unique(data$subject_id)
data_by_subj = aggregate(data, by=c(subject_id), fun=count);
data_by_subj = aggregate(data, by=c(subject_id), FUN=count);
data_by_subj = aggregate(data, by=c(subject_id), FUN=length);
data_by_subj = aggregate(data, by=subject_id, FUN=length);
data_by_subj = aggregate(data, by=c(subject_id), FUN=length);
data_by_subj = aggregate(data, by=c(data$subject_id), FUN=length);
data_by_subj = aggregate(recorded_accuracy, data, by=c(subject_id), FUN=len);
data_by_subj = aggregate(x=recorded_accuracy, data=data, by=c(subject_id), FUN=len);
data_by_subj = aggregate(len ~ ., data=data, by=c(subject_id), FUN=len);
data_by_subj = aggregate(data, FUN=mean);
data$subject_id
table(data)
library(plyr)
data = read.csv("gm_pl_v1_0.csv", header=TRUE);
res = ddply(data, c("subject_id", "stage"), summarise,
N    = length(id),
acc  = mean(recorded_accuracy)
)
View(res)
res[res$stage=='post',]
res = ddply(data, c("subject_id"), summarise,
pre = length(stage=='pre'),
acc  = mean(recorded_accuracy)
)
res = ddply(data, c("subject_id"), summarise,
pre = count(stage=='pre'),
acc  = mean(recorded_accuracy)
res = ddply(data, c("subject_id"), summarise,
pre = count(stage=='pre'),
acc  = mean(recorded_accuracy)
)
res = ddply(data, c("subject_id"), summarise,
pre = count(stage=='pre'),
acc  = mean(recorded_accuracy)
)
res = ddply(data, c("subject_id"), summarise,
pre = length(stage=='pre'),
acc  = mean(recorded_accuracy)
)
res = ddply(data, c("subject_id"), summarise,
pre = length(stage[stage=='pre']),
acc  = mean(recorded_accuracy)
)
View(res)
res = ddply(data, c("subject_id"), summarise,
pre = length(stage=='pre'),
acc  = mean(recorded_accuracy)
)
View(res)
View(res)
res = ddply(data, c("subject_id"), summarise,
pre = length(stage[stage=='pre']),
post = length(stage[stage=='post']),
main = length(stage[stage=='main']),
acc  = mean(recorded_accuracy)
)
View(res)
View(res)
complete_subjects = summary$subject_id[summary$pre == 20 & summary$post == 20]
summary = ddply(data_all, c("subject_id"), summarise,
pre = length(stage[stage=='pre']),
post = length(stage[stage=='post']),
main = length(stage[stage=='main']),
acc  = mean(recorded_accuracy)
);
library(plyr)
# load data
data_all = read.csv("gm_pl_v1_0.csv", header=TRUE);
summary = ddply(data_all, c("subject_id"), summarise,
pre = length(stage[stage=='pre']),
post = length(stage[stage=='post']),
main = length(stage[stage=='main']),
acc  = mean(recorded_accuracy)
);
complete_subjects = summary$subject_id[summary$pre == 20 & summary$post == 20]
data = subset(data_all, (subject_id %in% complete_subjects))
View(summary)
complete_subjects
print('hi')
print('valid subjects: ' + len(complete_subjects))
print('valid subjects: ' + length(complete_subjects))
print('valid subjects: '.length(complete_subjects))
print('valid subjects: ', length(complete_subjects))
length(complete_subjects)
cat('valid subjects: ', length(complete_subjects))
cat('valid subjects:', length(complete_subjects))
data = subset(data_all, (subject_id %in% complete_subjects))
View(data)
summary = ddply(data, c("subject_id", "stage"), summarize,
acc = mean(recorded_accuracy));
View(summary)
View(summary)
bargraph.CI(x.factor=subject_id,response=acc,data=data,group=stage,legend=T,ylab='correct answer rate');
library(sciplot)
bargraph.CI(x.factor=subject_id,response=acc,data=data,group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data,group=stage,legend=T,ylab='correct answer rate');
rm(list=ls())
data_all = read.csv("gm_pl_v1_0.csv", header=TRUE);
d1 = ddply(data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main']))
complete_subjects = d1$subject_id[d1$pre == 20 & d1$post == 20]
cat('valid subjects:', length(complete_subjects))
data = subset(data_all, (subject_id %in% complete_subjects))
summary = ddply(data, c("subject_id", "stage"), summarize,
acc = mean(recorded_accuracy));
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data,group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data_all,group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data,group=stage,legend=T,ylab='correct answer rate');
data = droplevels(data)
summary = ddply(data, c("subject_id", "stage"), summarize,
acc = mean(recorded_accuracy));
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data,group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=subject_id,response=acc,data=summary,group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=subject_id,response=acc,data=summary,group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data,group=stage,legend=T,ylab='correct answer rate');
factor(data_all$stage)
factor(data_all$stage)
data_all$stage = factor(c("pre", "main", "post"));
factor(data_all$stage) = factor(c("pre", "main", "post"));
factor(data_all$stage, levels=c("pre", "main", "post"));
library(plyr)
library(sciplot)
rm(list=ls())
# load data
data_all = read.csv("gm_pl_v1_0.csv", header=TRUE);
factor(data_all$stage, levels=c("pre", "main", "post"));
d1 = ddply(data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main']))
complete_subjects = d1$subject_id[d1$pre == 20 & d1$post == 20]
cat('valid subjects:', length(complete_subjects))
data = subset(data_all, (subject_id %in% complete_subjects))
data = droplevels(data)
summary = ddply(data, c("subject_id", "stage"), summarize,
acc = mean(recorded_accuracy));
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data,group=stage,legend=T,ylab='correct answer rate');
factor(data$stage)
factor(data$stage)
factor(data$stage, levels=c("pre", "main", "post"));
summary = ddply(data, c("subject_id", "stage"), summarize,
acc = mean(recorded_accuracy));
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data,group=stage,legend=T,ylab='correct answer rate');
data_all$stage = factor(data$stage, levels=c("pre", "main", "post"));
data_all$stage = factor(data$stage, levels=c("pre", "main", "post"));
rm(list=ls())
# load data
data_all = read.csv("gm_pl_v1_0.csv", header=TRUE);
data_all$stage = factor(data_all$stage, levels=c("pre", "main", "post"));
d1 = ddply(data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main']))
complete_subjects = d1$subject_id[d1$pre == 20 & d1$post == 20]
cat('valid subjects:', length(complete_subjects))
data = subset(data_all, (subject_id %in% complete_subjects))
data = droplevels(data)
summary = ddply(data, c("subject_id", "stage"), summarize,
acc = mean(recorded_accuracy));
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data,group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data[data$stage != "main"],group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data[data$stage != "main"],group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=subject_id,response=recorded_accuracy,data=data[data$stage != "main",],group=stage,legend=T,ylab='correct answer rate');
bargraph.CI(x.factor=stage,response=recorded_accuracy,data=data[data$stage != "main",],legend=T,ylab='correct answer rate');
barplot(summary$acc);
library(ggplot2)
ggplot(summary, aes(factor(acc), subject_id, fill = stage)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(summary, aes(factor(subject_id), acc, fill = stage)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
ggplot(summary, aes(factor(subject_id), acc, fill = stage)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set2")
ggplot(summary, aes(factor(subject_id), acc, fill = stage)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set3")
ggplot(summary, aes(factor(subject_id), acc, fill = stage)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
barchart(acc~stage,data=summary,groups=subject_id,
scales=list(x=list(rot=90,cex=0.8)))
library(lattice)
barchart(acc~stage,data=summary,groups=subject_id,
scales=list(x=list(rot=90,cex=0.8)))
barchart(acc~subject_id,data=summary,groups=stage,
scales=list(x=list(rot=90,cex=0.8)))
barchart(acc~subject_id,data=summary,groups=stage);
barchart(acc~subject_id,data=summary,groups=stage,ylim=c(0,1));
barchart(acc~subject_id,data=summary,groups=stage,ylim=c(0,1),xlab='subject');
barchart(acc~subject_id,data=summary,groups=stage,ylim=c(0,1),xlab='subject',ylab='accuracy');
barchart(acc~subject_id,data=summary,groups=stage,ylim=c(0,1),xlab='subject',ylab='rough accuracy');
barchart(acc~subject_id,data=summary,groups=stage,ylim=c(0,1),xlab='subject',ylab='estimated accuracy');
barchart(acc~subject_id,data=summary,groups=stage,ylim=c(0,1),xlab='subject',ylab='extremely picky accuracy');
ggplot(summary, aes(factor(subject_id), acc, fill = stage))
ggplot(summary, aes(factor(subject_id), acc, fill = stage)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
bargraph.CI(x.factor=stage,response=recorded_accuracy,data=data[data$stage != "main",],legend=T,ylab='correct answer rate');
barchart(acc~subject_id,data=summary,groups=stage,ylim=c(0,1),auto,key=TRUE,xlab='subject',ylab='extremely picky accuracy');
barchart(acc~subject_id,data=summary,groups=stage,ylim=c(0,1),auto.key=TRUE,xlab='subject',ylab='extremely picky accuracy');
_6c0 = data[data$subject_id == '6C0B50']
s6c0 = data[data$subject_id == '6C0B50']
s6c0 = data[data$subject_id == '6C0B50',]
View(`s6c0`)
s = data[data$subject_id == '0E0B41',]
View(s)
View(data)
View(data)
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main']
, avg_pre_time = mean(recorded_time_to_submit[stage=='pre'], avg_post_time = mean(recorded_time_to_submit[stage=='post']))))
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main']
, avg_pre_time = mean(recorded_time_to_submit[stage=='pre']), avg_post_time = mean(recorded_time_to_submit[stage=='post'])))
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main'])
, avg_pre_time = mean(recorded_time_to_submit[stage=='pre']), avg_post_time = mean(recorded_time_to_submit[stage=='post']))
View(`d1`)
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main'])
, avg_pre_time = mean(recorded_time_to_submit[stage=='pre']), avg_post_time = mean(recorded_time_to_submit[stage=='post'])
, no_answers_pre = length(stage[stage=='pre' & (recorded_answer=='x=' | recorded_answer=='=x')]))
View(`d1`)
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main'])
, avg_pre_time = mean(recorded_time_to_submit[stage=='pre']), avg_post_time = mean(recorded_time_to_submit[stage=='post'])
, no_answers_pre = length(stage[stage=='pre' & (recorded_answer=='x=' | recorded_answer=='=x')])
, no_answers_post = length(stage[stage=='post' & (recorded_answer=='x=' | recorded_answer=='=x')])
View(`d1`)
View(`d1`)
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main'])
, avg_pre_time = mean(recorded_time_to_submit[stage=='pre']), avg_post_time = mean(recorded_time_to_submit[stage=='post'])
, no_answers_pre = length(stage[stage=='pre' & (recorded_answer=='x=' | recorded_answer=='=x')])
, no_answers_post = length(stage[stage=='post' & (recorded_answer=='x=' | recorded_answer=='=x')]))
View(`d1`)
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main'])
, avg_pre_time = median(recorded_time_to_submit[stage=='pre']), avg_post_time = median(recorded_time_to_submit[stage=='post'])
, no_answers_pre = length(stage[stage=='pre' & (recorded_answer=='x=' | recorded_answer=='=x')])
, no_answers_post = length(stage[stage=='post' & (recorded_answer=='x=' | recorded_answer=='=x')]))
View(`d1`)
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main'])
, median_pre_time = median(recorded_time_to_submit[stage=='pre']), median_post_time = median(recorded_time_to_submit[stage=='post'])
, no_answers_pre = length(stage[stage=='pre' & (recorded_answer=='x=' | recorded_answer=='=x')])
, no_answers_post = length(stage[stage=='post' & (recorded_answer=='x=' | recorded_answer=='=x')]))
complete_subjects = d1$subject_id[ d1$pre == 20 & d1$post == 20 & d1$no_answers_pre < 10
& d1$n0_answers_post < 10 & d1$median_pre_time > 2000
& d1$median_post_time > 2000]
cat('valid subjects:', length(complete_subjects))
complete_subjects = d1$subject_id[ d1$pre == 20 & d1$post == 20 & d1$no_answers_pre < 10
& d1$no_answers_post < 10 & d1$median_pre_time > 2000
& d1$median_post_time > 2000]
cat('valid subjects:', length(complete_subjects))
data = subset(data_all, (subject_id %in% complete_subjects))
data = droplevels(data)
summary = ddply(data, c("subject_id", "stage"), summarize,
acc = mean(recorded_accuracy));
library(ggplot2)
ggplot(summary, aes(factor(subject_id), acc, fill = stage)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
bargraph.CI(x.factor=stage,response=recorded_accuracy,data=data[data$stage != "main",],legend=T,ylab='correct answer rate');
complete_subjects = d1$subject_id[ d1$pre == 32 & d1$post == 32 & d1$no_answers_pre < 10
& d1$no_answers_post < 10 & d1$median_pre_time > 2000
& d1$median_post_time > 2000]
cat('valid subjects:', length(complete_subjects))
data = subset(data_all, (subject_id %in% complete_subjects))
data = droplevels(data)
summary = ddply(data, c("subject_id", "stage"), summarize,
acc = mean(recorded_accuracy));
library(ggplot2)
ggplot(summary, aes(factor(subject_id), acc, fill = stage)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
data_all = read.csv("gm_pl_v1_0.csv", header=TRUE);
data_all$stage = factor(data_all$stage, levels=c("pre", "main", "post"));
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main'])
, median_pre_time = median(recorded_time_to_submit[stage=='pre']), median_post_time = median(recorded_time_to_submit[stage=='post'])
, no_answers_pre = length(stage[stage=='pre' & (recorded_answer=='x=' | recorded_answer=='=x')])
, no_answers_post = length(stage[stage=='post' & (recorded_answer=='x=' | recorded_answer=='=x')]))
complete_subjects = d1$subject_id[ d1$pre == 32 & d1$post == 32 & d1$no_answers_pre < 10
& d1$no_answers_post < 10 & d1$median_pre_time > 2000
data_all = read.csv("gm_pl_v1_0.csv", header=TRUE);
data_all$stage = factor(data_all$stage, levels=c("pre", "main", "post"));
d1 = ddply( data_all, c("subject_id"), summarise, pre = length(stage[stage=='pre']), post = length(stage[stage=='post']), main = length(stage[stage=='main'])
, median_pre_time = median(recorded_time_to_submit[stage=='pre']), median_post_time = median(recorded_time_to_submit[stage=='post'])
, no_answers_pre = length(stage[stage=='pre' & (recorded_answer=='x=' | recorded_answer=='=x')])
, no_answers_post = length(stage[stage=='post' & (recorded_answer=='x=' | recorded_answer=='=x')]))
complete_subjects = d1$subject_id[ d1$pre == 20 & d1$post == 20 & d1$no_answers_pre < 10
& d1$no_answers_post < 10 & d1$median_pre_time > 2000
& d1$median_post_time > 2000]
cat('valid subjects:', length(complete_subjects))
data = subset(data_all, (subject_id %in% complete_subjects))
data = droplevels(data)
summary = ddply(data, c("subject_id", "stage"), summarize,
acc = mean(recorded_accuracy));
library(ggplot2)
ggplot(summary, aes(factor(subject_id), acc, fill = stage)) +
geom_bar(stat="identity", position = "dodge") +
scale_fill_brewer(palette = "Set1")
